{"version":3,"sources":["Hooks/useBallots.js","Images/Pharmacies/Inkafarma.webp","Images/Pharmacies/Mifarma.webp","types/bba5/typesPharmacies.js","Forms/FormAddBallot.js","Components/Spinner.js","Components/messages/ErrorMessage.js"],"names":["useBallots","useState","ballots","setBallots","isLoading","setIsloading","errorMsg","setErrorMsg","dispatch","useDispatch","push","useHistory","useEffect","a","fetchWithToken","resp","json","body","status","codes","getProducts","activateBallot","ballotNum","activated","ReactGA","event","category","action","code","company","toUpperCase","respJson","validateBallots","errors","message","typesPharmacies","FormAddBallot","setActivated","ballot","setBallot","selectedPharmacies","pharmacy","className","src","Inkafarma","alt","title","MiFarma","btnInkafarma","onClick","btnMifarma","type","placeholder","onChange","e","target","value","length","ErrorMessage","text","Spinner","isPrimary"],"mappings":"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","file":"static/js/37.24a00e0f.chunk.js","sourcesContent":["import ReactGA from 'react-ga';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport { fetchWithToken } from '../Helpers/Bba5/api/fetch';\r\nimport { validateBallots } from '../Redux/Actions/BBA5/information';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport const useBallots = () => {\r\n  const [ballots, setBallots] = useState([]);\r\n  const [isLoading, setIsloading] = useState(true);\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n  const { push } = useHistory();\r\n\r\n  useEffect(() => {\r\n    const getProducts = async () => {\r\n      try {\r\n        const resp = await fetchWithToken('/showCode', {}, 'POST');\r\n\r\n        const body = await resp.json();\r\n        setIsloading(false);\r\n        if (body.status === 'success') {\r\n          setBallots(body.codes);\r\n        }\r\n      } catch (error) {}\r\n    };\r\n    getProducts();\r\n  }, []);\r\n\r\n  const activateBallot = async (ballotNum, activated) => {\r\n    ReactGA.event({\r\n      category: 'AGREGAR BOLETA',\r\n      action: 'Activar Boleta',\r\n    });\r\n\r\n    try {\r\n      setIsloading(true);\r\n      setErrorMsg('');\r\n      const resp = await fetchWithToken(\r\n        '/storeCode',\r\n        {\r\n          code: ballotNum,\r\n          company: activated.toUpperCase(),\r\n        },\r\n        'POST'\r\n      );\r\n      const respJson = await resp.json();\r\n      setIsloading(false);\r\n      if (respJson.status === 'success') {\r\n        dispatch(validateBallots());\r\n        ReactGA.event({\r\n          category: 'AGREGAR BOLETA',\r\n          action: 'Boleta Éxitosa',\r\n        });\r\n        return push('/usuario/boletas-agregada');\r\n      } else if (respJson.errors) {\r\n        if (respJson.errors.code) {\r\n          setErrorMsg(respJson.errors.code[0]);\r\n        } else if (respJson.errors.company) {\r\n          setErrorMsg(respJson.errors.company[0]);\r\n        }\r\n      } else if (respJson.status === 'error' && respJson.message !== '') {\r\n        setErrorMsg(respJson.message);\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  return {\r\n    ballots,\r\n    isLoading,\r\n    activateBallot,\r\n    errorMsg,\r\n  };\r\n};\r\n","export default __webpack_public_path__ + \"static/media/Inkafarma.48e76bd6.webp\";","export default __webpack_public_path__ + \"static/media/Mifarma.b89639dc.webp\";","export const typesPharmacies = {\r\n  inkafarma: 'Inkafarma',\r\n  mifarma: 'Mifarma',\r\n};\r\n","import { Fragment, useState } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Button } from '../Components/Buttons';\r\nimport { btnInkafarma, btnMifarma } from '../Images/Decorations/Buttons';\r\nimport { Inkafarma, MiFarma } from '../Images/Pharmacies';\r\nimport { typesPharmacies } from '../types/bba5/typesPharmacies';\r\nimport { Spinner } from '../Components/Spinner';\r\nimport { ErrorMessage } from '../Components/messages/ErrorMessage';\r\nimport { useBallots } from '../Hooks/useBallots';\r\n\r\nconst FormAddBallot = () => {\r\n  const [activated, setActivated] = useState('');\r\n  const [ballot, setBallot] = useState('');\r\n  const { activateBallot, errorMsg, isLoading } = useBallots();\r\n\r\n  const selectedPharmacies = (pharmacy) => {\r\n    ReactGA.event({\r\n      category: 'AGREGAR BOLETA',\r\n      action: 'Boleta seleccionada: ' + pharmacy,\r\n    });\r\n    setActivated(pharmacy);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div\r\n        className={`content__body px-2 mt-1 ${activated === '' ? 'mb-5' : ''}`}\r\n      >\r\n        <div\r\n          className={`imgs__pharmacies ${\r\n            activated !== '' ? 'img__activated' : ''\r\n          }`}\r\n        >\r\n          {(activated === '' || activated === typesPharmacies.inkafarma) && (\r\n            <img\r\n              src={Inkafarma}\r\n              alt=\"Boleta Inkafarma\"\r\n              title=\"Boleta Inkafarma\"\r\n              className={`${\r\n                activated === typesPharmacies.inkafarma ? 'activated' : ''\r\n              } animate__animated animate__headShake animate__slow`}\r\n            />\r\n          )}\r\n\r\n          {(activated === '' || activated === typesPharmacies.mifarma) && (\r\n            <img\r\n              src={MiFarma}\r\n              alt=\"Boleta Mi Farma\"\r\n              title=\"Boleta Mi Farma\"\r\n              className={`animate__animated animate__headShake animate__slow ${\r\n                activated === typesPharmacies.mifarma ? 'activated' : ''\r\n              }`}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"content__description description__md my-3\">\r\n          <p className=\"text-center\">\r\n            Selecciona la farmacia en donde realizaste tu compra\r\n          </p>\r\n        </div>\r\n        <div className=\"buttons__pharmacies my-3\">\r\n          <img\r\n            src={btnInkafarma}\r\n            alt=\"Botón Inkafarma\"\r\n            title=\"Botón Inkafarma\"\r\n            onClick={() => selectedPharmacies(typesPharmacies.inkafarma)}\r\n            className={\r\n              activated === typesPharmacies.inkafarma ? 'activated' : ''\r\n            }\r\n          />\r\n          <img\r\n            src={btnMifarma}\r\n            alt=\"Botón Mi Farma\"\r\n            title=\"Botón Mi Farma\"\r\n            onClick={() => selectedPharmacies(typesPharmacies.mifarma)}\r\n            className={activated === typesPharmacies.mifarma ? 'activated' : ''}\r\n          />\r\n        </div>\r\n\r\n        {activated !== '' && (\r\n          <div className=\"content__form pt-2 pb-0 px-4 px-lg-5\">\r\n            <div className=\"content__input\">\r\n              <input\r\n                className=\"form-control form-control-lg\"\r\n                type=\"text\"\r\n                placeholder=\"Ingresa el código de tu boleta\"\r\n                onChange={(e) => setBallot(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {errorMsg.length ? <ErrorMessage text={errorMsg} /> : null}\r\n\r\n      {activated !== '' ? (\r\n        !isLoading ? (\r\n          <div className=\"buttons mb-4\">\r\n            <Button\r\n              isPrimary\r\n              text=\"Activar Boleta\"\r\n              onClick={() => activateBallot(ballot, activated)}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <Spinner />\r\n        )\r\n      ) : null}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default FormAddBallot","import React from 'react';\r\n\r\nexport const Spinner = () => {\r\n  return (\r\n    <div className=\"d-flex justify-content-center mt-4\">\r\n      <div className=\"donutSpinner\"></div>\r\n    </div>\r\n  );\r\n};\r\n","export const ErrorMessage = ({ text }) => {\r\n  return (\r\n    <div className=\"message message__error\">\r\n      <i className=\"fas fa-exclamation-triangle\"></i>\r\n      <p>{text}</p>\r\n    </div>\r\n  );\r\n};\r\n"],"sourceRoot":""}